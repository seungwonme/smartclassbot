// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// 사용자 관리
// ========================================

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  profile    UserProfile?
  brands     Brand[]      @relation("BrandCreator")
  campaigns  Campaign[]   @relation("CampaignCreator")
  systemLogs SystemLog[]

  @@map("users")
}

model UserProfile {
  id              String   @id @default(uuid())
  userId          String   @unique @map("user_id")
  name            String?
  phone           String?
  company         String?
  position        String?
  profileImageUrl String?  @map("profile_image_url")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

enum UserRole {
  brand
  admin
}

// ========================================
// 브랜드 관리
// ========================================

model Brand {
  id                   String   @id @default(uuid())
  name                 String
  website              String?
  story                String?
  marketingDescription String?  @map("marketing_description")
  logoUrl              String?  @map("logo_url")
  activeCampaigns      Int      @default(0) @map("active_campaigns")
  createdBy            String?  @map("created_by")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  creator        User?                @relation("BrandCreator", fields: [createdBy], references: [id])
  channels       BrandChannel[]
  socialChannels BrandSocialChannel[]
  products       Product[]
  campaigns      Campaign[]
  personas       Persona[]

  @@map("brands")
}

model BrandChannel {
  id          String   @id @default(uuid())
  brandId     String   @map("brand_id")
  channelType String   @map("channel_type") // '네이버 스마트스토어', '쿠팡', '마켓컬리' 등
  channelUrl  String?  @map("channel_url")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("brand_channels")
}

model BrandSocialChannel {
  id            String   @id @default(uuid())
  brandId       String   @map("brand_id")
  platform      String // 'instagram', 'youtube', 'tiktok' 등
  channelUrl    String?  @map("channel_url")
  followerCount Int?     @map("follower_count")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("brand_social_channels")
}

// ========================================
// 제품 관리
// ========================================

model Product {
  id                String   @id @default(uuid())
  brandId           String   @map("brand_id")
  name              String
  purchaseUrl       String?  @map("purchase_url")
  unit              String? // '개', 'ml', 'g' 등
  price             Decimal? @db.Decimal(10, 2)
  description       String?
  ingredients       String?
  usageInstructions String?  @map("usage_instructions")
  effects           String?
  usp               String? // Unique Selling Point
  targetGender      Gender?  @map("target_gender")
  targetAgeStart    Int?     @map("target_age_start")
  targetAgeEnd      Int?     @map("target_age_end")
  imageUrls         String[] @map("image_urls")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  brand            Brand             @relation(fields: [brandId], references: [id], onDelete: Cascade)
  campaignProducts CampaignProduct[]

  @@map("products")
}

enum Gender {
  male
  female
  unisex
}

// ========================================
// 인플루언서 관리
// ========================================

model Influencer {
  id              String   @id @default(uuid())
  nickname        String
  realName        String?  @map("real_name")
  platform        Platform
  platformUserId  String?  @map("platform_user_id")
  profileUrl      String?  @map("profile_url")
  profileImageUrl String?  @map("profile_image_url")
  followerCount   Int?     @map("follower_count")
  engagementRate  Decimal? @map("engagement_rate") @db.Decimal(5, 2)
  region          String? // '베이징', '상하이' 등
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  categories          InfluencerCategory[]
  metrics             InfluencerMetric[]
  campaignInfluencers CampaignInfluencer[]

  @@map("influencers")
}

model InfluencerCategory {
  id           String   @id @default(uuid())
  influencerId String   @map("influencer_id")
  category     String // '뷰티', '패션', '요리' 등
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  influencer Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@map("influencer_categories")
}

model InfluencerMetric {
  id             String   @id @default(uuid())
  influencerId   String   @map("influencer_id")
  metricDate     DateTime @map("metric_date") @db.Date
  followerCount  Int?     @map("follower_count")
  engagementRate Decimal? @map("engagement_rate") @db.Decimal(5, 2)
  avgViews       Int?     @map("avg_views")
  avgLikes       Int?     @map("avg_likes")
  avgComments    Int?     @map("avg_comments")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  influencer Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([influencerId, metricDate])
  @@map("influencer_metrics")
}

enum Platform {
  douyin
  xiaohongshu
}

// ========================================
// 캠페인 관리
// ========================================

model Campaign {
  id          String         @id @default(uuid())
  brandId     String         @map("brand_id")
  name        String
  description String?
  budget      Decimal?       @db.Decimal(12, 2)
  startDate   DateTime?      @map("start_date") @db.Date
  endDate     DateTime?      @map("end_date") @db.Date
  status      CampaignStatus @default(creating)
  createdBy   String?        @map("created_by")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  // Relations
  brand               Brand                @relation(fields: [brandId], references: [id])
  creator             User?                @relation("CampaignCreator", fields: [createdBy], references: [id])
  campaignProducts    CampaignProduct[]
  campaignInfluencers CampaignInfluencer[]
  analytics           CampaignAnalytics[]
  billings            Billing[]

  @@map("campaigns")
}

model CampaignProduct {
  id         String   @id @default(uuid())
  campaignId String   @map("campaign_id")
  productId  String   @map("product_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@map("campaign_products")
}

model CampaignInfluencer {
  id           String                   @id @default(uuid())
  campaignId   String                   @map("campaign_id")
  influencerId String                   @map("influencer_id")
  status       CampaignInfluencerStatus @default(invited)
  fee          Decimal?                 @db.Decimal(10, 2)
  contractUrl  String?                  @map("contract_url")
  joinedAt     DateTime?                @map("joined_at")
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @updatedAt @map("updated_at")

  // Relations
  campaign   Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer Influencer @relation(fields: [influencerId], references: [id])
  contents   Content[]

  @@map("campaign_influencers")
}

enum CampaignStatus {
  creating
  confirming
  content_planning
  content_production
  content_review
  live
  monitoring
  completed
  cancelled
}

enum CampaignInfluencerStatus {
  invited
  accepted
  rejected
  confirmed
  completed
}

// ========================================
// 페르소나 관리
// ========================================

model Persona {
  id                  String   @id @default(uuid())
  brandId             String   @map("brand_id")
  name                String
  ageGroup            String?  @map("age_group") // '20-29', '30-39' 등
  gender              String?
  location            String?
  interests           String[]
  lifestyle           String?
  shoppingHabits      String?  @map("shopping_habits")
  painPoints          String?  @map("pain_points")
  aiGeneratedInsights Json?    @map("ai_generated_insights")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@map("personas")
}

// ========================================
// 콘텐츠 관리
// ========================================

model Content {
  id                   String        @id @default(uuid())
  campaignInfluencerId String        @map("campaign_influencer_id")
  contentType          ContentType?  @map("content_type")
  platform             Platform
  contentUrl           String?       @map("content_url")
  title                String?
  description          String?
  status               ContentStatus @default(draft)
  publishedAt          DateTime?     @map("published_at")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")

  // Relations
  campaignInfluencer CampaignInfluencer @relation(fields: [campaignInfluencerId], references: [id], onDelete: Cascade)
  metrics            ContentMetric[]

  @@map("contents")
}

model ContentMetric {
  id             String   @id @default(uuid())
  contentId      String   @map("content_id")
  metricDate     DateTime @map("metric_date") @db.Date
  views          Int      @default(0)
  likes          Int      @default(0)
  comments       Int      @default(0)
  shares         Int      @default(0)
  engagementRate Decimal? @map("engagement_rate") @db.Decimal(5, 2)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, metricDate])
  @@map("content_metrics")
}

enum ContentType {
  video
  image
  post
  live
}

enum ContentStatus {
  draft
  submitted
  approved
  revision_requested
  published
}

// ========================================
// 분석 및 리포트
// ========================================

model CampaignAnalytics {
  id                String   @id @default(uuid())
  campaignId        String   @map("campaign_id")
  analyticsDate     DateTime @map("analytics_date") @db.Date
  totalViews        Int      @default(0) @map("total_views")
  totalLikes        Int      @default(0) @map("total_likes")
  totalComments     Int      @default(0) @map("total_comments")
  totalShares       Int      @default(0) @map("total_shares")
  avgEngagementRate Decimal? @map("avg_engagement_rate") @db.Decimal(5, 2)
  roi               Decimal? @db.Decimal(10, 2)
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, analyticsDate])
  @@map("campaign_analytics")
}

// ========================================
// 정산 관리
// ========================================

model Billing {
  id          String        @id @default(uuid())
  campaignId  String        @map("campaign_id")
  billingType BillingType   @map("billing_type")
  amount      Decimal       @db.Decimal(12, 2)
  status      BillingStatus @default(pending)
  dueDate     DateTime?     @map("due_date") @db.Date
  paidDate    DateTime?     @map("paid_date") @db.Date
  invoiceUrl  String?       @map("invoice_url")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@map("billings")
}

enum BillingType {
  platform_fee
  influencer_fee
  other
}

enum BillingStatus {
  pending
  processing
  completed
  cancelled
}

// ========================================
// 시스템 관리
// ========================================

model SystemLog {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  details    Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("system_logs")
}

model PlatformSetting {
  id           String   @id @default(uuid())
  settingKey   String   @unique @map("setting_key")
  settingValue Json     @map("setting_value")
  description  String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("platform_settings")
}
